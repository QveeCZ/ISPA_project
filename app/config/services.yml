# Learn more about services, parameters and containers at
# https://symfony.com/doc/current/service_container.html
parameters:
    #parameter_name: value

services:
    # default configuration for services in *this* file
    _defaults:
        # automatically injects dependencies in your services
        autowire: true
        # automatically registers your services as commands, event subscribers, etc.
        autoconfigure: true
        # this means you cannot fetch services directly from the container via $container->get()
        # if you need to do this, you can override this setting on individual services
        public: false

    # makes classes in src/AppBundle available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    AppBundle\:
        resource: '../../src/AppBundle/*'
        # you can exclude directories or files
        # but if a service is unused, it's removed anyway
        exclude: '../../src/AppBundle/{Entity,Repository,Tests,Resources}'

    # controllers are imported separately to make sure they're public
    # and have a tag that allows actions to type-hint services
    AppBundle\Controller\:
        resource: '../../src/AppBundle/Controller'
        public: true
        tags: ['controller.service_arguments']

    # makes classes in src/UserBundle available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    UserBundle\:
        resource: '../../src/UserBundle/*'
        # you can exclude directories or files
        # but if a service is unused, it's removed anyway
        exclude: '../../src/UserBundle/{Entity,Repository,Tests,Resources}'

    # makes classes in src/SchoolBundle available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    SchoolBundle\:
        resource: '../../src/SchoolBundle/*'
        # you can exclude directories or files
        # but if a service is unused, it's removed anyway
        exclude: '../../src/SchoolBundle/{Entity,Repository,Tests,Resources}'

    # add more services, or override services that need manual wiring
    # AppBundle\Service\ExampleService:
    #     arguments:
    #         $someArgument: 'some_value'
    sonata.user.admin.group:
        abstract: true
        public: false

    security.acl.permission.map:
        class: Sonata\AdminBundle\Security\Acl\Permission\AdminPermissionMap


    #Custom sonata services

    #Course bundle
    course.admin.course:
        class: CourseBundle\Admin\CourseAdmin
        tags:
          - { name: sonata.admin, manager_type: orm, group: course, label: course }
        arguments: [~, CourseBundle\Entity\Course, ~]
        public: true

    course.admin.registration:
        class: CourseBundle\Admin\RegistrationAdmin
        tags:
          - { name: sonata.admin, manager_type: orm, group: course, label: registration }
        arguments: [~, CourseBundle\Entity\Registration, ~]
        public: true

    school.admin.car:
        class: SchoolBundle\Admin\CarAdmin
        tags:
          - { name: sonata.admin, manager_type: orm, group: school, label: car }
        arguments: [~, SchoolBundle\Entity\Car, ~]
        public: true

    #School bundle
    school.admin.lector:
        class: SchoolBundle\Admin\LectorAdmin
        tags:
          - { name: sonata.admin, manager_type: orm, group: school, label: lector }
        arguments: [~, SchoolBundle\Entity\Lector, ~]
        public: true

    school.admin.school:
        class: SchoolBundle\Admin\SchoolAdmin
        tags:
          - { name: sonata.admin, manager_type: orm, group: school, label: school }
        arguments: [~, SchoolBundle\Entity\School, ~]
        public: true